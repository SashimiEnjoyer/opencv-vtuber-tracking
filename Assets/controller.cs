//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""controller"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""c42a5dea-61ef-4f34-8a79-a270ed192bf1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6782b5fe-de68-4a6e-a149-9d40758916eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Button"",
                    ""id"": ""b20bd43e-7339-4414-bd8e-b10d82626244"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""13eb1b31-4f20-4206-8e71-e96a68e8df83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9407f648-14f9-49e5-9b49-399583316014"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7d9f8bff-61d7-42a8-a86f-e5a7aa9d1fb5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6547c433-8a21-4c9d-8de4-8bb2e624c531"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""580d33ee-abde-43dc-b782-902f9fc021b1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8001de49-3056-44a1-9de2-b4f258b61641"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a55da8b6-973f-4214-aaa5-403e4b709ef6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b8be3075-a523-41f2-bed0-a1803e2fd233"",
                    ""path"": ""<HID::ShanWan PC/PS3/Android>/button3"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f2aa7f9-4d19-4427-96c6-65508b929ca9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa3681b8-d132-4586-b3b3-f0abfdb2f44a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Expression Key"",
            ""id"": ""cf8ab276-d16a-45a9-9603-519f4e8146f2"",
            ""actions"": [
                {
                    ""name"": ""Expression 1"",
                    ""type"": ""Button"",
                    ""id"": ""125ec2c7-7e50-4aa9-8b3b-dace4c8e17b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 2"",
                    ""type"": ""Button"",
                    ""id"": ""ad388491-5520-4e3a-a606-a34c335d0072"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 3"",
                    ""type"": ""Button"",
                    ""id"": ""3f79c22e-65bd-4ec2-a41b-5916f2090996"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 4"",
                    ""type"": ""Button"",
                    ""id"": ""ad137eb0-e0a8-46ad-945d-3c821d900842"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 5"",
                    ""type"": ""Button"",
                    ""id"": ""374421ab-0c72-4f93-b6cf-688f84d5773b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 6"",
                    ""type"": ""Button"",
                    ""id"": ""90bd0837-d0ef-465d-afe1-66c4761127ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 7"",
                    ""type"": ""Button"",
                    ""id"": ""582c586c-f555-4866-afbd-adcf79a55127"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 8"",
                    ""type"": ""Button"",
                    ""id"": ""f7f0acf9-a07b-49f6-b10f-691a93ff9751"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 9"",
                    ""type"": ""Button"",
                    ""id"": ""f1f8f03a-3515-4616-8d32-bb2dcb541bb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expression 10"",
                    ""type"": ""Button"",
                    ""id"": ""b812afad-ab65-4c84-a0f6-5037b3abf074"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset Expression"",
                    ""type"": ""Button"",
                    ""id"": ""98d9b022-898f-49cf-94f3-ae5bea36d174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift Expression"",
                    ""type"": ""Button"",
                    ""id"": ""41942896-7953-4cb1-afb1-5602ba0e5260"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91bd561a-8080-465b-87b7-a7bad403fbd4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""711b40a5-9e95-4db2-874e-94db0b2b063c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1da4325d-d7cf-4d0d-bd8d-23fb3a651eba"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17741dd6-84e1-48ff-a7d2-4bdeadcc0000"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48568122-0e23-47a3-b134-4280c375970d"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa88795e-c0a6-41b4-a603-ba9cf1aed567"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bf0f7f1-5c02-4c9a-9eb4-dee0c86727fa"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f91888fb-5791-48be-9d3b-1292c8798c5c"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81d349e3-f0ab-43b6-b8ec-3546a9923bb5"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df2224ea-b5fc-4e2c-847d-67046177e0df"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expression 10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19e0be12-8437-40ab-b213-736946119a3a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Expression"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1246a778-65b7-44b2-a432-6ed556be657f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift Expression"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_Movement = m_Control.FindAction("Movement", throwIfNotFound: true);
        m_Control_Scale = m_Control.FindAction("Scale", throwIfNotFound: true);
        m_Control_Jump = m_Control.FindAction("Jump", throwIfNotFound: true);
        // Expression Key
        m_ExpressionKey = asset.FindActionMap("Expression Key", throwIfNotFound: true);
        m_ExpressionKey_Expression1 = m_ExpressionKey.FindAction("Expression 1", throwIfNotFound: true);
        m_ExpressionKey_Expression2 = m_ExpressionKey.FindAction("Expression 2", throwIfNotFound: true);
        m_ExpressionKey_Expression3 = m_ExpressionKey.FindAction("Expression 3", throwIfNotFound: true);
        m_ExpressionKey_Expression4 = m_ExpressionKey.FindAction("Expression 4", throwIfNotFound: true);
        m_ExpressionKey_Expression5 = m_ExpressionKey.FindAction("Expression 5", throwIfNotFound: true);
        m_ExpressionKey_Expression6 = m_ExpressionKey.FindAction("Expression 6", throwIfNotFound: true);
        m_ExpressionKey_Expression7 = m_ExpressionKey.FindAction("Expression 7", throwIfNotFound: true);
        m_ExpressionKey_Expression8 = m_ExpressionKey.FindAction("Expression 8", throwIfNotFound: true);
        m_ExpressionKey_Expression9 = m_ExpressionKey.FindAction("Expression 9", throwIfNotFound: true);
        m_ExpressionKey_Expression10 = m_ExpressionKey.FindAction("Expression 10", throwIfNotFound: true);
        m_ExpressionKey_ResetExpression = m_ExpressionKey.FindAction("Reset Expression", throwIfNotFound: true);
        m_ExpressionKey_ShiftExpression = m_ExpressionKey.FindAction("Shift Expression", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_Control_Movement;
    private readonly InputAction m_Control_Scale;
    private readonly InputAction m_Control_Jump;
    public struct ControlActions
    {
        private @Controller m_Wrapper;
        public ControlActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Control_Movement;
        public InputAction @Scale => m_Wrapper.m_Control_Scale;
        public InputAction @Jump => m_Wrapper.m_Control_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Scale.started += instance.OnScale;
            @Scale.performed += instance.OnScale;
            @Scale.canceled += instance.OnScale;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Scale.started -= instance.OnScale;
            @Scale.performed -= instance.OnScale;
            @Scale.canceled -= instance.OnScale;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @Control => new ControlActions(this);

    // Expression Key
    private readonly InputActionMap m_ExpressionKey;
    private List<IExpressionKeyActions> m_ExpressionKeyActionsCallbackInterfaces = new List<IExpressionKeyActions>();
    private readonly InputAction m_ExpressionKey_Expression1;
    private readonly InputAction m_ExpressionKey_Expression2;
    private readonly InputAction m_ExpressionKey_Expression3;
    private readonly InputAction m_ExpressionKey_Expression4;
    private readonly InputAction m_ExpressionKey_Expression5;
    private readonly InputAction m_ExpressionKey_Expression6;
    private readonly InputAction m_ExpressionKey_Expression7;
    private readonly InputAction m_ExpressionKey_Expression8;
    private readonly InputAction m_ExpressionKey_Expression9;
    private readonly InputAction m_ExpressionKey_Expression10;
    private readonly InputAction m_ExpressionKey_ResetExpression;
    private readonly InputAction m_ExpressionKey_ShiftExpression;
    public struct ExpressionKeyActions
    {
        private @Controller m_Wrapper;
        public ExpressionKeyActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Expression1 => m_Wrapper.m_ExpressionKey_Expression1;
        public InputAction @Expression2 => m_Wrapper.m_ExpressionKey_Expression2;
        public InputAction @Expression3 => m_Wrapper.m_ExpressionKey_Expression3;
        public InputAction @Expression4 => m_Wrapper.m_ExpressionKey_Expression4;
        public InputAction @Expression5 => m_Wrapper.m_ExpressionKey_Expression5;
        public InputAction @Expression6 => m_Wrapper.m_ExpressionKey_Expression6;
        public InputAction @Expression7 => m_Wrapper.m_ExpressionKey_Expression7;
        public InputAction @Expression8 => m_Wrapper.m_ExpressionKey_Expression8;
        public InputAction @Expression9 => m_Wrapper.m_ExpressionKey_Expression9;
        public InputAction @Expression10 => m_Wrapper.m_ExpressionKey_Expression10;
        public InputAction @ResetExpression => m_Wrapper.m_ExpressionKey_ResetExpression;
        public InputAction @ShiftExpression => m_Wrapper.m_ExpressionKey_ShiftExpression;
        public InputActionMap Get() { return m_Wrapper.m_ExpressionKey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExpressionKeyActions set) { return set.Get(); }
        public void AddCallbacks(IExpressionKeyActions instance)
        {
            if (instance == null || m_Wrapper.m_ExpressionKeyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExpressionKeyActionsCallbackInterfaces.Add(instance);
            @Expression1.started += instance.OnExpression1;
            @Expression1.performed += instance.OnExpression1;
            @Expression1.canceled += instance.OnExpression1;
            @Expression2.started += instance.OnExpression2;
            @Expression2.performed += instance.OnExpression2;
            @Expression2.canceled += instance.OnExpression2;
            @Expression3.started += instance.OnExpression3;
            @Expression3.performed += instance.OnExpression3;
            @Expression3.canceled += instance.OnExpression3;
            @Expression4.started += instance.OnExpression4;
            @Expression4.performed += instance.OnExpression4;
            @Expression4.canceled += instance.OnExpression4;
            @Expression5.started += instance.OnExpression5;
            @Expression5.performed += instance.OnExpression5;
            @Expression5.canceled += instance.OnExpression5;
            @Expression6.started += instance.OnExpression6;
            @Expression6.performed += instance.OnExpression6;
            @Expression6.canceled += instance.OnExpression6;
            @Expression7.started += instance.OnExpression7;
            @Expression7.performed += instance.OnExpression7;
            @Expression7.canceled += instance.OnExpression7;
            @Expression8.started += instance.OnExpression8;
            @Expression8.performed += instance.OnExpression8;
            @Expression8.canceled += instance.OnExpression8;
            @Expression9.started += instance.OnExpression9;
            @Expression9.performed += instance.OnExpression9;
            @Expression9.canceled += instance.OnExpression9;
            @Expression10.started += instance.OnExpression10;
            @Expression10.performed += instance.OnExpression10;
            @Expression10.canceled += instance.OnExpression10;
            @ResetExpression.started += instance.OnResetExpression;
            @ResetExpression.performed += instance.OnResetExpression;
            @ResetExpression.canceled += instance.OnResetExpression;
            @ShiftExpression.started += instance.OnShiftExpression;
            @ShiftExpression.performed += instance.OnShiftExpression;
            @ShiftExpression.canceled += instance.OnShiftExpression;
        }

        private void UnregisterCallbacks(IExpressionKeyActions instance)
        {
            @Expression1.started -= instance.OnExpression1;
            @Expression1.performed -= instance.OnExpression1;
            @Expression1.canceled -= instance.OnExpression1;
            @Expression2.started -= instance.OnExpression2;
            @Expression2.performed -= instance.OnExpression2;
            @Expression2.canceled -= instance.OnExpression2;
            @Expression3.started -= instance.OnExpression3;
            @Expression3.performed -= instance.OnExpression3;
            @Expression3.canceled -= instance.OnExpression3;
            @Expression4.started -= instance.OnExpression4;
            @Expression4.performed -= instance.OnExpression4;
            @Expression4.canceled -= instance.OnExpression4;
            @Expression5.started -= instance.OnExpression5;
            @Expression5.performed -= instance.OnExpression5;
            @Expression5.canceled -= instance.OnExpression5;
            @Expression6.started -= instance.OnExpression6;
            @Expression6.performed -= instance.OnExpression6;
            @Expression6.canceled -= instance.OnExpression6;
            @Expression7.started -= instance.OnExpression7;
            @Expression7.performed -= instance.OnExpression7;
            @Expression7.canceled -= instance.OnExpression7;
            @Expression8.started -= instance.OnExpression8;
            @Expression8.performed -= instance.OnExpression8;
            @Expression8.canceled -= instance.OnExpression8;
            @Expression9.started -= instance.OnExpression9;
            @Expression9.performed -= instance.OnExpression9;
            @Expression9.canceled -= instance.OnExpression9;
            @Expression10.started -= instance.OnExpression10;
            @Expression10.performed -= instance.OnExpression10;
            @Expression10.canceled -= instance.OnExpression10;
            @ResetExpression.started -= instance.OnResetExpression;
            @ResetExpression.performed -= instance.OnResetExpression;
            @ResetExpression.canceled -= instance.OnResetExpression;
            @ShiftExpression.started -= instance.OnShiftExpression;
            @ShiftExpression.performed -= instance.OnShiftExpression;
            @ShiftExpression.canceled -= instance.OnShiftExpression;
        }

        public void RemoveCallbacks(IExpressionKeyActions instance)
        {
            if (m_Wrapper.m_ExpressionKeyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExpressionKeyActions instance)
        {
            foreach (var item in m_Wrapper.m_ExpressionKeyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExpressionKeyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExpressionKeyActions @ExpressionKey => new ExpressionKeyActions(this);
    public interface IControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnScale(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IExpressionKeyActions
    {
        void OnExpression1(InputAction.CallbackContext context);
        void OnExpression2(InputAction.CallbackContext context);
        void OnExpression3(InputAction.CallbackContext context);
        void OnExpression4(InputAction.CallbackContext context);
        void OnExpression5(InputAction.CallbackContext context);
        void OnExpression6(InputAction.CallbackContext context);
        void OnExpression7(InputAction.CallbackContext context);
        void OnExpression8(InputAction.CallbackContext context);
        void OnExpression9(InputAction.CallbackContext context);
        void OnExpression10(InputAction.CallbackContext context);
        void OnResetExpression(InputAction.CallbackContext context);
        void OnShiftExpression(InputAction.CallbackContext context);
    }
}
